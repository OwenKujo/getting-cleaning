from flask import Flask, render_template, request, redirect, url_for, flash, session, abort
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import os
from dotenv import load_dotenv
import openai
import re
from openai import RateLimitError

from pythainlp.tokenize import word_tokenize
from meanings_data import (
    meanings_money, meanings_work, meanings_animal, meanings_activities,
    meanings_good_bad, meanigs_right_left, meanings_general, meanings_love
)

def Dream_Prediction(time_str, topic):
    # time_str is now one of: '‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô', '‡∏´‡∏±‡∏ß‡∏Ñ‡πà‡∏≥', '‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏Å', '‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡πâ‡∏≤'
    if time_str == '‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô':
        time_msg = "‡∏ù‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ\n‚û° ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£"
    elif time_str == '‡∏´‡∏±‡∏ß‡∏Ñ‡πà‡∏≥':
        time_msg = "‡∏ù‡∏±‡∏ô‡∏´‡∏±‡∏ß‡∏Ñ‡πà‡∏≥: ‡∏•‡∏≤‡∏á‡∏ö‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏ñ‡∏∂‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏≤‡∏á‡πÑ‡∏Å‡∏•"
    elif time_str == '‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏Å':
        time_msg = "‡∏ù‡∏±‡∏ô‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏Å: ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß"
    elif time_str == '‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡πâ‡∏≤':
        time_msg = "‡∏ù‡∏±‡∏ô‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡πâ‡∏≤: ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏ô‡πÉ‡∏Å‡∏•‡πâ"
    else:
        time_msg = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô"

    topic_msg = {
        '1': "‡∏´‡∏°‡∏ß‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô",
        '2': "‡∏´‡∏°‡∏ß‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å",
        '3': "‡∏´‡∏°‡∏ß‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô",
        '4': "‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏±‡∏ï‡∏ß‡πå",
        '5': "‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
        '6': "‡∏´‡∏°‡∏ß‡∏î‡∏ó‡πç‡∏©‡∏ô‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏µ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏¢",
        '7': "‡∏´‡∏°‡∏ß‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏ß‡∏≤‡∏£‡πâ‡∏≤‡∏¢ ‡∏ã‡πâ‡∏≤‡∏¢‡∏î‡∏µ",
        '8': "‡∏´‡∏°‡∏ß‡∏î‡∏ó‡∏±‡πâ‡πà‡∏ß‡πÑ‡∏õ",
    }.get(str(topic), "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")

    return f"{time_msg}\n{topic_msg}"

# ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ù‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡πà‡∏≤‡∏á‡πÜ

def find_dream_meaning(text, topic):
    tokens = word_tokenize(text, engine='newmm')
    if topic == '1':
        meanings = meanings_money
    elif topic == '2':
        meanings = meanings_love
    elif topic == '3':
        meanings = meanings_work
    elif topic == '4':
        meanings = meanings_animal
    elif topic == '5':
        meanings = meanings_activities
    elif topic == '6':
        meanings = meanings_good_bad    
    elif topic == '7':
        meanings = meanigs_right_left
    elif topic == '8':
        meanings = meanings_general
    else:
        return "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"

    for word in tokens:
        if word in meanings:
            meaning, numbers = meanings[word]
            return f"üîç ‡∏ù‡∏±‡∏ô‡∏ñ‡∏∂‡∏á '{word}'\nüí° ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢: {meaning}\nüî¢ ‡πÄ‡∏•‡∏Ç‡∏ô‡∏≥‡πÇ‡∏ä‡∏Ñ: {' '.join(numbers)}"
    return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"

def get_relevant_meanings(dream_text, topic):
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å meanings dict ‡∏ï‡∏≤‡∏° topic
    topic_map = {
        '1': meanings_money,
        '2': meanings_love,
        '3': meanings_work,
        '4': meanings_animal,
        '5': meanings_activities,
        '6': meanings_good_bad,
        '7': meanigs_right_left,
        '8': meanings_general,
    }
    meanings = topic_map.get(str(topic), {})
    tokens = word_tokenize(dream_text, engine='newmm')
    found = []
    for word in tokens:
        if word in meanings:
            meaning, numbers = meanings[word]
            found.append(f"'{word}': {meaning} (‡πÄ‡∏•‡∏Ç: {' '.join(numbers)})")
    return '\n'.join(found) if found else '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'

def llm_interpret_dream_with_data(dream_text, time, topic):
    relevant = get_relevant_meanings(dream_text, topic)
    prompt = (
        f"‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ù‡∏±‡∏ô:\n{relevant}\n\n"
        f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ù‡∏±‡∏ô‡∏ß‡πà‡∏≤: {dream_text}\n‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {time}\n‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {topic}\n"
        "‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏Ç‡∏ô‡∏≥‡πÇ‡∏ä‡∏Ñ‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∏‡∏î (3-6 ‡∏ä‡∏∏‡∏î ‡∏ä‡∏∏‡∏î‡∏•‡∏∞ 2-4 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç) ‡πÇ‡∏î‡∏¢‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≠‡∏°‡∏°‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ô‡∏≥‡πÇ‡∏ä‡∏Ñ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
    )
    client = openai.OpenAI(api_key=os.environ.get('OPENAI_API_KEY'))
    response = client.chat.completions.create(
        model='gpt-3.5-turbo',
        messages=[{"role": "user", "content": prompt}],
        max_tokens=500,
        temperature=0.7,
    )
    ai_text = response.choices[0].message.content
    return ai_text

# --- Flask App Setup ---
app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev_default_secret')
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://fortune_q9tq_user:oYe6KE2wQauo9mG9d28StvKrbNwKyzx8@dpg-d1da0k7diees73cmobj0-a.oregon-postgres.render.com/fortune_q9tq'
db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# --- Models ---
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)
    dreams = db.relationship('Dream', backref='user', lazy=True)

class Dream(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    text = db.Column(db.Text, nullable=False)
    time = db.Column(db.String(50), nullable=False)
    topic = db.Column(db.String(10), nullable=False)
    result = db.Column(db.Text, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# --- Routes (HTML templates to be added) ---
@app.route('/')
def home():
    return render_template('home.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    if request.method == 'POST':
        username = request.form['username'].strip()
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        # Validation
        if not username or not password or not confirm_password:
            flash('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'danger')
            return render_template('register.html')
        if len(username) > 32:
            flash('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 32 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£', 'danger')
            return render_template('register.html')
        if password != confirm_password:
            flash('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô', 'danger')
            return render_template('register.html')
        # Check for duplicate username (case-insensitive)
        if User.query.filter(db.func.lower(User.username) == username.lower()).first():
            flash('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß', 'danger')
            return render_template('register.html')
        hashed_pw = generate_password_hash(password)
        new_user = User(username=username, password=hashed_pw)
        db.session.add(new_user)
        db.session.commit()
        flash('‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', 'success')
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    if request.method == 'POST':
        username = request.form['username'].strip()
        password = request.form['password']
        if not username or not password:
            flash('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô', 'danger')
            return render_template('login.html')
        user = User.query.filter(db.func.lower(User.username) == username.lower()).first()
        if user and check_password_hash(user.password, password):
            login_user(user)
            flash('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success')
            return redirect(url_for('profile'))
        else:
            flash('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'danger')
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('home'))

@app.route('/profile')
@login_required
def profile():
    dreams = Dream.query.filter_by(user_id=current_user.id).order_by(Dream.id.desc()).all()
    return render_template('profile.html', dreams=dreams)

@app.route('/predict', methods=['POST'])
@login_required
def predict():
    dream_text = request.form['dream_text']
    dream_time = request.form['dream_time']
    dream_topic = request.form['dream_topic']

    prediction = Dream_Prediction(dream_time, dream_topic)
    meaning = find_dream_meaning(dream_text, dream_topic)

    try:
        ai_text = llm_interpret_dream_with_data(dream_text, dream_time, dream_topic)
    except RateLimitError:
        ai_text = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ (‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô OpenAI)"
    except Exception as e:
        ai_text = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AI: {e}"

    new_dream = Dream(
        text=dream_text,
        time=dream_time,
        topic=dream_topic,
        result=ai_text,
        user_id=current_user.id
    )
    db.session.add(new_dream)
    db.session.commit()

    return render_template(
        'result.html',
        prediction=prediction,
        meaning=meaning,
        llm_result=ai_text
    )

@app.route('/delete_dream/<int:dream_id>', methods=['POST'])
@login_required
def delete_dream(dream_id):
    dream = Dream.query.get_or_404(dream_id)
    if dream.user_id != current_user.id:
        abort(403)
    db.session.delete(dream)
    db.session.commit()
    flash('‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success')
    return redirect(url_for('profile'))

if __name__ == '__main__':
    load_dotenv()
    openai.api_key = os.environ.get('OPENAI_API_KEY')
    with app.app_context():
        db.create_all()
    app.run(debug=True)
